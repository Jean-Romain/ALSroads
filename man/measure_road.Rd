% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mffp_road.R
\name{measure_road}
\alias{measure_road}
\alias{measure_roads}
\title{Align and measure a road from lidar data}
\usage{
measure_road(
  ctg,
  road,
  dtm,
  water = NULL,
  confidence = 0.7,
  param = mffproads_default_parameters
)

measure_roads(
  ctg,
  roads,
  dtm,
  water = NULL,
  confidence = 0.7,
  param = mffproads_default_parameters
)
}
\arguments{
\item{ctg}{a non-normalized \link[lidR:LAScatalog-class]{LAScatalog} object from lidR package}

\item{road}{a single line (sf format) used as reference to search and measure road}

\item{dtm}{RasterLayer storing the DTM with a resolution of at least of 1 m. Can be computed
with \link[lidR:grid_terrain]{grid_terrain}.}

\item{water}{a set of polygons (sf format) of water bodies. This is used to mask the water bodies
so they cannot be mistaken as a drivable surfaces. Not mandatory but can help. It also allows to
detect bridges.}

\item{confidence}{numeric. The confidence you have on the location of the reference road. 1 means
that the road is 100\% a ground truth. This will skip the relocation step. High values mean that your
are confident that reference road is correct and this will help the algorithm. Low values leave more
freedom to the algorithm but it becomes also more prone to errors. However this parameter is not
very sensitive.}

\item{param}{a list of many parameters. See \link{mffproads_default_parameters}.}

\item{roads}{multiples lines (sf format) used as reference to search and measure roads}
}
\value{
An sf object similar to the input with additional attributes and an updated geometry.
}
\description{
From a road (line), extracts the line with a buffer from the point cloud and recomputes
the actual positioning of the road and compute some metrics for the road such as its width
or drivable width as well as its state (exists, no longer exists)
}
\examples{
library(lidR)
library(sf)
library(raster)

dir  <- system.file("extdata", "", package="MFFProads")
road <- system.file("extdata", "road_971487.gpkg", package="MFFProads")
dtm  <- system.file("extdata", "dtm_1m.tif", package="MFFProads")
ctg  <- readLAScatalog(dir)
road <- st_read(road, quiet = TRUE)
dtm  <- raster(dtm)

plot(dtm, col = gray.colors(25, 0, 1))
plot(ctg, add = TRUE)
plot(st_geometry(road), add = TRUE, col = "red")

res <- measure_road(ctg, road, dtm)
res

plot(st_geometry(road), col = "red") # Inaccurate road track
plot(st_geometry(res), col = "blue", add = TRUE) # Corrected road track

mapview::mapview(list(road, res),
  layer.name = c("Inaccurate", "Corrected"),
  color = c("red", "blue"), map.type = "Esri.WorldImagery")

\dontrun{
# DEBUG

options(MFFProads.debug.finding = TRUE)
options(MFFProads.debug.measuring = FALSE)
options(MFFProads.debug.metrics = FALSE)
res <- measure_road(ctg, road, dtm)

options(MFFProads.debug.finding = FALSE)
options(MFFProads.debug.measuring = TRUE)
options(MFFProads.debug.metrics = FALSE)
res <- measure_road(ctg, road, dtm)

options(MFFProads.debug.finding = FALSE)
options(MFFProads.debug.measuring = FALSE)
options(MFFProads.debug.metrics = TRUE)
res <- measure_road(ctg, road, dtm)
}
}
